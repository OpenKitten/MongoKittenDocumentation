<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MongoDB Swift Driver</title>
    <link>http://docs.openkitten.org/index.xml</link>
    <description>Recent content on MongoDB Swift Driver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 26 Dec 2016 12:14:08 +0100</lastBuildDate>
    <atom:link href="http://docs.openkitten.org/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Document</title>
      <link>http://docs.openkitten.org/bson/Document/</link>
      <pubDate>Mon, 26 Dec 2016 12:14:08 +0100</pubDate>
      
      <guid>http://docs.openkitten.org/bson/Document/</guid>
      <description>

&lt;h1 id=&#34;document&#34;&gt;Document&lt;/h1&gt;

&lt;p&gt;Document is the primary type of BSON. It&amp;rsquo;s either a Dictionary or Array and allows interaction like a native Swift Dictionary or Array.&lt;/p&gt;

&lt;h2 id=&#34;basic-usage&#34;&gt;Basic Usage&lt;/h2&gt;

&lt;p&gt;Documents are usable like any other Swift dictionary/array. Only you&amp;rsquo;ll need to explicitely specify your variable to be a Document.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let document: Document = [
	&amp;quot;my&amp;quot;: &amp;quot;data&amp;quot;,
	&amp;quot;isAwesome&amp;quot;: true
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let document = [
	&amp;quot;my&amp;quot;: &amp;quot;data&amp;quot;,
	&amp;quot;isAwesome&amp;quot;: true
] as Document
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, if you need an Array, you can use the Array literal.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let arrayDocument = [
	1, 2, 3, 4, 5
]

let arrayDocument2 = [
	&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;e&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two restrictions to a Document.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the Document is a Dictionary, the key &lt;em&gt;must&lt;/em&gt; be a String&lt;/li&gt;
&lt;li&gt;The Value in both the Dictionary and Array for &lt;em&gt;must&lt;/em&gt; be a ValueConvertible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, ValueConvertible is a protocol that, by defaut, supports BSON primitives. BSON Primitives can always be used. And custom types can be ValueConvertible.&lt;/p&gt;

&lt;p&gt;Documents allow various methods of initializing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let document0 = Document()
let document1 = Document(array: ...)
let document2 = Document(dictionaryElements: ...)
let document3 = Document(data: [5, 0, 0, 0, 0])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;They allow actions like an array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var document: Document = [1, 2, 3, 4, 5]

document.append(6)
document[3] // 4
document.count // 6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or actions like a Dictionary:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var document: Document = [
	&amp;quot;key0&amp;quot;: 0,
	&amp;quot;key1&amp;quot;: 1,
	&amp;quot;key2&amp;quot;: 2,
	&amp;quot;key3&amp;quot;: 3
]

document[&amp;quot;key1&amp;quot;] // 1
document[&amp;quot;key4&amp;quot;] // nil
document[&amp;quot;key4&amp;quot;] = 4
document[&amp;quot;key4&amp;quot;] // 4

document.keys // [&amp;quot;key0&amp;quot;, &amp;quot;key1&amp;quot;, &amp;quot;key2&amp;quot;, &amp;quot;key3&amp;quot;, &amp;quot;key4&amp;quot;]
document.values // [0, 1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dictionary Documents act like you would expect.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let document: Document = [
  &amp;quot;hey&amp;quot;: true,
  &amp;quot;hello&amp;quot;: 3.33
]

for (key, value) in document {
	guard key == &amp;quot;hey&amp;quot; || key == &amp;quot;hello&amp;quot; else {
		fatalError(&amp;quot;Impossible!&amp;quot;)
	}

  guard Bool(value) == true || Double(value) == 3.33 else {
		fatalError(&amp;quot;Impossible!&amp;quot;)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Array Documents act in a similar way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let document: Document = [true, false, 3.3, false, true]

for (key, value) in document {
	guard [&amp;quot;0&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;].contains(key) else {
		fatalError(&amp;quot;The key in an array is the position as string number&amp;quot;)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Documents can be easily embedded inside each other. Because of this we allow you to easily subscript a Document to access sub-Documents and even deeper layers of the structure using variadic subscripts.&lt;/p&gt;

&lt;p&gt;These subscripts accept Strings (for Dictionary Document keys) and &lt;code&gt;Int&lt;/code&gt;egers (for Array positions or Dictionary positions). These work like you would expect from any other Array or Dictionary.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var document = [
	&amp;quot;subdoc&amp;quot;: [
		&amp;quot;subsubdoc&amp;quot;: [
			&amp;quot;array&amp;quot;: [0, false, true, &amp;quot;henk&amp;quot;]
		]
	]
]

// Get element position 2 from array in subsubdoc in subdoc in document
let trueBoolean = document[&amp;quot;subdoc&amp;quot;][&amp;quot;subsubdoc&amp;quot;][&amp;quot;array&amp;quot;][2] // true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Document also provides some extra features that are commonly used with BSON:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var document: Document = [
	&amp;quot;key&amp;quot;: true,
	&amp;quot;subdoc&amp;quot;: [
	  &amp;quot;value&amp;quot;: 3
	]
]

document[dotNotated: &amp;quot;subdoc.value&amp;quot;] // 3

document.flattened() // [&amp;quot;key&amp;quot;: true, &amp;quot;subdoc.value&amp;quot;: 3]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ObjectId</title>
      <link>http://docs.openkitten.org/bson/ObjectId/</link>
      <pubDate>Mon, 26 Dec 2016 12:13:13 +0100</pubDate>
      
      <guid>http://docs.openkitten.org/bson/ObjectId/</guid>
      <description>

&lt;h1 id=&#34;objectid&#34;&gt;ObjectId&lt;/h1&gt;

&lt;p&gt;ObjectId is the primary form of identification in MongoDB. ObjectId is a 12 bytes long identifier consisting of non- pseudo- and fully random components.&lt;/p&gt;

&lt;p&gt;ObjectId contains metadata about the creation date in UNIX epoch time, the machine identifer and process ID that created it as well as a random number that&amp;rsquo;s incremented.&lt;/p&gt;

&lt;p&gt;ObjectId is often represented as a 24-character hexadecimal string which is useful in places like an URL&lt;/p&gt;

&lt;p&gt;I.E. &lt;code&gt;https://example.com/users/1234567890abcdef12345678/profile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;MongoKitten ObjectId values are easily generated using an empty initializer: &lt;code&gt;ObjectId()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Alternatively they&amp;rsquo;re initializable using a hexadecimal String representation like &lt;code&gt;&amp;quot;1234567890abcdef12345678&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let hexString = &amp;quot;1234567890abcdef12345678&amp;quot;
let objectId = try ObjectId(hexString)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In some cases you might want to know the ObjectIds creation date. You can fetch a &lt;code&gt;Foundation.Date&lt;/code&gt; from the ObjectId using &lt;code&gt;let objectIdCreationDate = myObjectId.epoch&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Last but not least, ObjectIds are hashable, so they&amp;rsquo;re usable for a key in a Dictionary, but not a Document.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dictionary: [ObjectId: Document] = [
  ObjectId(): ...,
  ObjectId(): ...
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the case of MongoKitten/MongoDB this may be useful when you&amp;rsquo;re creating a cache for information from the database. Instead of re-fetching this data from the database you can identify the data using the ObjectId identifier easily.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BSONPrimitive</title>
      <link>http://docs.openkitten.org/bson/Primitive/</link>
      <pubDate>Mon, 26 Dec 2016 12:09:53 +0100</pubDate>
      
      <guid>http://docs.openkitten.org/bson/Primitive/</guid>
      <description>

&lt;h1 id=&#34;bson-primitive&#34;&gt;BSON Primitive&lt;/h1&gt;

&lt;p&gt;BSON is based upon a set of primitive types. These are described &lt;a href=&#34;http://bsonspec.org/spec.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this BSON library we contain a protocol: &lt;code&gt;BSONPrimitive&lt;/code&gt;. This protocol is public and should normally &lt;em&gt;not&lt;/em&gt; be implemented on an existing object.&lt;/p&gt;

&lt;p&gt;This protocol is here to support all native Swift types that are related to an existing MongoDB type. Examples of this would be &lt;code&gt;Int&lt;/code&gt; &lt;code&gt;Bool&lt;/code&gt; &lt;code&gt;String&lt;/code&gt;, but also custom BSON types like &lt;code&gt;JavascriptCode&lt;/code&gt; and &lt;code&gt;Binary&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;BSONPrimitives are representable as BSON binary data that can be put into the Value position of a(n) (array-)Document.&lt;/p&gt;

&lt;p&gt;These primitives also have a typeIdentifier that identifies the type of the binary data.&lt;/p&gt;

&lt;p&gt;Adding custom types that does not conform to an unsupported/custom version of the BSON specification will &lt;em&gt;not&lt;/em&gt; be deserialized and will result in corrupt data.&lt;/p&gt;

&lt;p&gt;The list of BSON Primitives:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Double&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.openkitten.org/bson/Document/&#34;&gt;Document&lt;/a&gt; (Array and Dictionary)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.openkitten.org/bson/ObjectId/&#34;&gt;ObjectId&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bool&lt;/li&gt;
&lt;li&gt;Int32&lt;/li&gt;
&lt;li&gt;Int (Int64)&lt;/li&gt;
&lt;li&gt;Binary&lt;/li&gt;
&lt;li&gt;Decimal128&lt;/li&gt;
&lt;li&gt;JavascriptCode&lt;/li&gt;
&lt;li&gt;Null (not nil)&lt;/li&gt;
&lt;li&gt;Date (from Foundation)&lt;/li&gt;
&lt;li&gt;MinKey&lt;/li&gt;
&lt;li&gt;MaxKey&lt;/li&gt;
&lt;li&gt;RegularExpression (BSON Type)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conversion&#34;&gt;Conversion&lt;/h2&gt;

&lt;p&gt;All BSON Primitive types can be used as the value in a Document. If you want to extract a value from a Document you&amp;rsquo;ll need to subscript the Document and initialize the expected type with the subscript outcome:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let doc: Document = [
  &amp;quot;food&amp;quot;: &amp;quot;cheese&amp;quot;,
  &amp;quot;age&amp;quot;: 3,
  &amp;quot;favouriteNumber&amp;quot;: &amp;quot;3&amp;quot;,
  &amp;quot;male&amp;quot;: true
]

String(doc[&amp;quot;food&amp;quot;]) // &amp;quot;cheese&amp;quot;
Int(doc[&amp;quot;food&amp;quot;]) // nil
Int(doc[&amp;quot;age&amp;quot;]) // 3
String(doc[&amp;quot;age&amp;quot;]) // &amp;quot;3&amp;quot;
Int(doc[&amp;quot;favouriteNumber&amp;quot;]) // 3
String(doc[&amp;quot;favouriteNumber&amp;quot;]) // &amp;quot;3&amp;quot;
Bool(doc[&amp;quot;male&amp;quot;]) // true
Bool(doc[&amp;quot;nonExistentKey&amp;quot;]) // nil
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>BSON</title>
      <link>http://docs.openkitten.org/bson/BSON/</link>
      <pubDate>Mon, 26 Dec 2016 12:07:42 +0100</pubDate>
      
      <guid>http://docs.openkitten.org/bson/BSON/</guid>
      <description>

&lt;h2 id=&#34;a-native-fast-bson-library-for-swift-written-in-swift&#34;&gt;A native, fast BSON library for Swift, written in Swift.&lt;/h2&gt;

&lt;p&gt;BSON is parsed and generated as specified for version 1.0 of the &lt;a href=&#34;http://bsonspec.org/spec.html&#34;&gt;BSON specification&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;compatibility&#34;&gt;Compatibility&lt;/h3&gt;

&lt;h5 id=&#34;operating-systems&#34;&gt;Operating systems&lt;/h5&gt;

&lt;p&gt;All versions starting with BSON 1.3 are compatible with OS X and Ubuntu 15.10. Other operating systems may work but are untested.&lt;/p&gt;

&lt;h5 id=&#34;swift-version&#34;&gt;Swift Version&lt;/h5&gt;

&lt;p&gt;We support the Swift version specified in .swift_version, which most of the time is the latest version of Swift when a version is released.&lt;/p&gt;

&lt;p&gt;For every new Swift snapshot we release a new minor version.&lt;/p&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;The supported method for using this library is trough the Swift Package manager, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import PackageDescription

let package = Package(
    name: &amp;quot;MyApp&amp;quot;,
    dependencies: [.Package(url: &amp;quot;https://github.com/OpenKitten/BSON.git&amp;quot;, majorVersion: 4)]
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;basic-usage&#34;&gt;Basic Usage&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Create a document using a dictionary literal
let document: Document = [
            &amp;quot;hello&amp;quot;: &amp;quot;I am a BSON document&amp;quot;,
            &amp;quot;temperature&amp;quot;: 42.5
        ]

// Retreive the BSON data, ready for storing or sending over the network
let data = document.bsonData // Array of [UInt8]

// Initialize a document using a [UInt8]
let sameDocument = try! Document(data: data)

// Do something with the data
let temperature = Double(document[&amp;quot;temperature&amp;quot;])

// Use the temperature
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;embedded-documents&#34;&gt;Embedded documents&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let document: Document = [
            &amp;quot;subdocument&amp;quot;: [&amp;quot;hello&amp;quot;: &amp;quot;sample&amp;quot;],
            &amp;quot;anothersubdocument&amp;quot;: [81.2, &amp;quot;cheese&amp;quot;] // an array is also an embedded document
        ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;comparing&#34;&gt;Comparing&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;document[&amp;quot;double&amp;quot;] == document[&amp;quot;int&amp;quot;] // true for Double(0) == Int(0)
document[&amp;quot;double&amp;quot;] === document[&amp;quot;int&amp;quot;] // false for Double(0) === Int(0)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;supported-types&#34;&gt;Supported Types&lt;/h3&gt;

&lt;p&gt;All non-deprecated BSON 1.0 types are supported.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Double&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Document&lt;/li&gt;
&lt;li&gt;Array&lt;/li&gt;
&lt;li&gt;ObjectId&lt;/li&gt;
&lt;li&gt;Bool&lt;/li&gt;
&lt;li&gt;DateTime&lt;/li&gt;
&lt;li&gt;32-bit integer&lt;/li&gt;
&lt;li&gt;64-bit integer&lt;/li&gt;
&lt;li&gt;Null value&lt;/li&gt;
&lt;li&gt;Binary&lt;/li&gt;
&lt;li&gt;Regular Expression&lt;/li&gt;
&lt;li&gt;Min Key&lt;/li&gt;
&lt;li&gt;Max Key&lt;/li&gt;
&lt;li&gt;Timestamp&lt;/li&gt;
&lt;li&gt;Javascript Code&lt;/li&gt;
&lt;li&gt;Javascript Code with Scope&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;supported-features&#34;&gt;Supported features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;MongoDB Extended JSON&lt;/li&gt;
&lt;li&gt;ISO8601 for Extended JSON Dates&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Really&lt;/strong&gt; fast BSON Parsing and Serializing&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Aggregation</title>
      <link>http://docs.openkitten.org/tutorials/mongokitten/aggregation/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/tutorials/mongokitten/aggregation/</guid>
      <description>

&lt;h1 id=&#34;aggregation&#34;&gt;Aggregation&lt;/h1&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Aggregation operations process data records and return
computed results. Aggregation operations group values from
multiple documents together, and can perform a variety of
operations on the grouped data to return a single result.&lt;/p&gt;

&lt;h2 id=&#34;the-aggregation-pipeline&#34;&gt;The Aggregation Pipeline&lt;/h2&gt;

&lt;p&gt;The aggregation pipeline is a framework for data aggregation
modeled on the concept of data processing pipelines. Documents
enter a multi-stage pipeline that transforms the documents into
aggregated results.&lt;/p&gt;

&lt;p&gt;For a full explanation and a complete list of pipeline stages
and operators, see the &lt;a href=&#34;https://docs.mongodb.com/manual/core/aggregation-pipeline/&#34;&gt;manual:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following example uses the aggregation pipeline on the
&lt;a href=&#34;https://raw.githubusercontent.com/OpenKitten/Mongo-Assets/master/restaurants.json&#34;&gt;restaurants&lt;/a&gt;
sample dataset.&lt;/p&gt;

&lt;p&gt;In the following example, the aggregation pipeline&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;first use a &lt;code&gt;$match&lt;/code&gt; stage to filter for documents whose &lt;code&gt;categories&lt;/code&gt; array field contains the element &lt;code&gt;Bakery&lt;/code&gt;.
The example uses &lt;a href=&#34;http://mongokitten.openkitten.org/Structs/AggregationPipeline/Stage.html#/s:ZFVV11MongoKitten19AggregationPipeline5Stage8matchingFVS_5QueryS1_&#34;&gt;&lt;code&gt;AggregationPipeline.Stage.matching&lt;/code&gt;&lt;/a&gt; to build the &lt;code&gt;$match&lt;/code&gt; stage.&lt;/li&gt;
&lt;li&gt;Then, uses a &lt;code&gt;$group&lt;/code&gt; stage to group the matching documents by the starts field, accumulating a count of documents for
each distinct value of &lt;code&gt;stars&lt;/code&gt;. The example uses &lt;a href=&#34;http://mongokitten.openkitten.org/Structs/AggregationPipeline/Stage.html#/s:ZFVV11MongoKitten19AggregationPipeline5Stage8groupingFTPS_23ExpressionRepresentable_8computedGVs10DictionarySSOS_26AccumulatedGroupExpression__S1_&#34;&gt;&lt;code&gt;AggregationPipeline.Stage.grouping&lt;/code&gt;&lt;/a&gt; to build the &lt;code&gt;$group&lt;/code&gt; stage
and &lt;a href=&#34;http://mongokitten.openkitten.org/Enums/AccumulatedGroupExpression.html#/s:ZFO11MongoKitten26AccumulatedGroupExpression5sumOfFtGSaPS_23ExpressionRepresentable___S0_&#34;&gt;&lt;code&gt;AccumulatedGroupExpression.sumOf&lt;/code&gt;&lt;/a&gt; to build the accumulator expression.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import MongoKitten

let server = try Server(mongoURL: &amp;quot;mongodb://localhost:27017&amp;quot;)
let database = server[&amp;quot;tutorial&amp;quot;]

let restaurants = database[&amp;quot;restaurants&amp;quot;]

let matchStage = AggregationPipeline.Stage.matching(&amp;quot;categories&amp;quot; == &amp;quot;Bakery&amp;quot;)
let groupStage = AggregationPipeline.Stage.grouping(&amp;quot;$stars&amp;quot;, computed: [&amp;quot;count&amp;quot;: .sumOf(1)])

let pipeline: AggregationPipeline = [matchStage, groupStage]

let results = try restaurants.aggregate(pipeline: pipeline)

let _ = results.map {
    print($0.dictionaryValue)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Authentication</title>
      <link>http://docs.openkitten.org/tutorials/mongokitten/connect/authenticating/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/tutorials/mongokitten/connect/authenticating/</guid>
      <description>

&lt;h1 id=&#34;authentication&#34;&gt;Authentication&lt;/h1&gt;

&lt;p&gt;Authentication is done using by either providing a MongoDB connection string or a ClientSettings object.&lt;/p&gt;

&lt;h2 id=&#34;mongodb-connection-string&#34;&gt;MongoDB connection String&lt;/h2&gt;

&lt;p&gt;Authentication via a connection String requires the username and password on the left side of the hostname like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let database = try Database(&amp;quot;mongodb://user:password@hostname&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The username and password need to be URL percent encoded.&lt;/p&gt;

&lt;h3 id=&#34;query-parameters&#34;&gt;Query Parameters&lt;/h3&gt;

&lt;p&gt;You can enable SSL with the query parameter &lt;code&gt;ssl&lt;/code&gt; as described &lt;a href=&#34;http://docs.openkitten.org/tutorials/mongokitten/connect/ssl/&#34;&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you need to authenticate to a specific database other than &amp;ldquo;admin&amp;rdquo; you can provide an &amp;ldquo;authSource&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let database = try Database(&amp;quot;mongodb://user:password@hostname?authSource=myauthdb&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if you need an authentication mechanism other than SCRAM you can select one using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let database = try Database(&amp;quot;mongodb://user:password@hostname?authMechanism=SCRAM_SHA_1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We currently only support &amp;ldquo;SCRAM_SHA_1&amp;rdquo; and &amp;ldquo;MONGODB-CR&amp;rdquo;. Although other mechanisms can be implemented in the future.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cheetah (JSON)</title>
      <link>http://docs.openkitten.org/tutorials/cheetah/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/tutorials/cheetah/</guid>
      <description>

&lt;h1 id=&#34;cheetah-json&#34;&gt;Cheetah - JSON&lt;/h1&gt;

&lt;p&gt;Cheetah is a JSON library that is really performant and easy to use at the same time.&lt;/p&gt;

&lt;p&gt;It provides an API similar to BSON which makes it feel part of the ecosystem.
Using KittenCore, Cheetah and BSON objects can be converted to the other.&lt;/p&gt;

&lt;p&gt;It is both performant and unicode compliant.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Add this line to your dependencies and rebuild your .xcodeproj file file using &lt;code&gt;swift package generate-xcodeproj&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.Package(url: &amp;quot;https://github.com/OpenKitten/Cheetah.git&amp;quot;, majorVersion: 0, minor: 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;instantiation-of-jsonobjects&#34;&gt;Instantiation of JSONObjects&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;names&amp;quot;: [&amp;quot;Joannis&amp;quot;, &amp;quot;Laurent&amp;quot;, &amp;quot;Robbert&amp;quot;],
  &amp;quot;awesomeNumber&amp;quot;: 3,
  &amp;quot;OpenKitten approved&amp;quot;: true,
  &amp;quot;bignum&amp;quot;: 13.37e+100,
  &amp;quot;smallnum&amp;quot;: -1,
  &amp;quot;project&amp;quot;: &amp;quot;Cheetah&amp;quot;,
  &amp;quot;details&amp;quot;: {
    &amp;quot;open&amp;quot;: &amp;quot;Kitten&amp;quot;,
    &amp;quot;license&amp;quot;: &amp;quot;MIT&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works out in Cheetah like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let object: JSONObject = [
  &amp;quot;names&amp;quot;: [&amp;quot;Joannis&amp;quot;, &amp;quot;Laurent&amp;quot;, &amp;quot;Robbert&amp;quot;],
  &amp;quot;awesomeNumber&amp;quot;: 3,
  &amp;quot;OpenKitten approved&amp;quot;: true,
  &amp;quot;bignum&amp;quot;: 13.37e+100,
  &amp;quot;smallnum&amp;quot;: -1,
  &amp;quot;project&amp;quot;: &amp;quot;Cheetah&amp;quot;,
  &amp;quot;details&amp;quot;: [
    &amp;quot;open&amp;quot;: &amp;quot;Kitten&amp;quot;,
    &amp;quot;license&amp;quot;: &amp;quot;MIT&amp;quot;
  ]
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;extraction&#34;&gt;Extraction&lt;/h2&gt;

&lt;p&gt;Whenever you want to extract values you can subscript it painlessly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let project = String(object[&amp;quot;project&amp;quot;])
let bignum = Double(object[&amp;quot;bignum&amp;quot;])
let smallnum = Int(object[&amp;quot;smallnum&amp;quot;])
let approved = Bool(object[&amp;quot;OpenKitten approved&amp;quot;])
let license = String(object[&amp;quot;details&amp;quot;][&amp;quot;license&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parsing&#34;&gt;Parsing&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let jsonString: String = ...
let jsonBytes: [UInt8] = ...

let jsonObject1 = JSONObject(from: jsonString)
let jsonObject2 = JSONObject(from: jsonBytes)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;serialization&#34;&gt;Serialization&lt;/h2&gt;

&lt;p&gt;Serialization works to strings and bytes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let jsonBinary: [UInt8] = object.serialized()
let jsonText: String = object.serializedString()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Collection CRUD Operations</title>
      <link>http://docs.openkitten.org/tutorials/mongokitten/crud/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/tutorials/mongokitten/crud/</guid>
      <description>

&lt;h1 id=&#34;crud&#34;&gt;CRUD&lt;/h1&gt;

&lt;p&gt;In &lt;a href=&#34;http://docs.openkitten.org/tutorials/mongokitten/connect/&#34;&gt;the setup guide&lt;/a&gt; we&amp;rsquo;ve covered how you can open a Database and from there a Collection. Collections are the storage place in MongoDB like tables for SQL databases.&lt;/p&gt;

&lt;p&gt;From a collection object we can start interacting with our data. From here we&amp;rsquo;ll cover all parts of CRUD.
(Create, Read, Update, Delete). And we&amp;rsquo;ll assume you have a Collection available as the variable &lt;code&gt;collection&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Collections Administration</title>
      <link>http://docs.openkitten.org/tutorials/mongokitten/collections/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/tutorials/mongokitten/collections/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Connect to MongoDB</title>
      <link>http://docs.openkitten.org/tutorials/mongokitten/connect/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/tutorials/mongokitten/connect/</guid>
      <description>

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;MongoKitten is initializable on Server or Database level. Server objects allow access to every database - if the account you use to authenticate has the permissions to - and is generally not used.&lt;/p&gt;

&lt;p&gt;Database is initializable separately and allows access to a single database on a MongoDB server. You can still access the server object from the Database and access other parts of the server via there if this is necessary.&lt;/p&gt;

&lt;p&gt;You can instantiate a Server using a MongoDB connection URL/String:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let server = try Server(&amp;quot;mongodb://localhost&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The database also has two initializers. One accepts a connection URL as String. The database which is accessed is equal to the authentication database in this case.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let database = try Database(&amp;quot;mongodb://user:password@ds12345-a0.domain.com:25078,ds12345-a1.domain.com:25078/kitten?replicaSet=rs-ds125078&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively you can create a server object and select the database from there:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let server = try Server(&amp;quot;mongodb://localhost&amp;quot;)

let database = server[&amp;quot;my-database-name&amp;quot;]
let database = Database(named: &amp;quot;my-database-name&amp;quot;, atServer: server)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Last but not least you can select a collection/table within a database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let usersCollection = database[&amp;quot;users&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From here you can interact with every part of MongoKitten.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Connection Options</title>
      <link>http://docs.openkitten.org/reference/connecting/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/reference/connecting/</guid>
      <description>

&lt;h1 id=&#34;url&#34;&gt;URL&lt;/h1&gt;

&lt;p&gt;Before we go into much further detail we&amp;rsquo;ll cover the concept and structure of a MongoDB connection URL.&lt;/p&gt;

&lt;p&gt;The most basic example of this would be &lt;code&gt;mongodb://localhost&lt;/code&gt;. This consists of the schema (&lt;code&gt;mongodb://&lt;/code&gt; which is required in all MongoDB connection URLs) as well as the hostname, in this case, &lt;code&gt;localhost&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The hostname can be either an IP address or a full address like &lt;code&gt;example.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hostnames can be succeeded by a semicolon &lt;code&gt;:&lt;/code&gt; and a port. A port is a number between 0 and 66535. By default MongoDB is hosted on 27017 which is used by default.&lt;/p&gt;

&lt;p&gt;In the URL you can also add the username and password and authentication database.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mongodb://usern4m3:p455word@example.com:12345/admin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this example the hostname is &lt;code&gt;example.com&lt;/code&gt;. The instance should be hosted at port &lt;code&gt;12345&lt;/code&gt; and we&amp;rsquo;re authenticating at the username &lt;code&gt;usern4m3&lt;/code&gt; and the password &lt;code&gt;p455word&lt;/code&gt;. The username and password should be URL percent encoded and the authentication database is &lt;code&gt;admin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Last but not least we can specify multiple hosts in the case of a replica set.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mongodb://username:password@host0.example.com:12345,host1.example.com:54321,host2.example.com:27017/admin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this example we&amp;rsquo;re connecting to a replica set of 3 hosts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;host0.example.com:12345&lt;/li&gt;
&lt;li&gt;host1.example.com:54321&lt;/li&gt;
&lt;li&gt;host2.example.com:27017&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;query-parameters&#34;&gt;Query parameters&lt;/h3&gt;

&lt;p&gt;After the URL&amp;rsquo;s path (the database) you can optionally add Query parameters.&lt;/p&gt;

&lt;p&gt;These are started with a question mark (&lt;code&gt;?&lt;/code&gt;) and have key-value pairs. Pairs are separated by an ampersand (&lt;code&gt;&amp;amp;&lt;/code&gt;). Every key-value pair has a key which is a string &lt;em&gt;without&lt;/em&gt; &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt; or &lt;code&gt;=&lt;/code&gt; characters (unless percent encoded) which is then followed by an equals sign (&lt;code&gt;=&lt;/code&gt;), followed by a value. The &lt;code&gt;=&lt;/code&gt; and value are optional for some parameters.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mongodb://localhost?ssl&amp;amp;authSource=admin&amp;amp;authMechanism=MONGODB-CR&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This URL has three keys:
- ssl
- authSource
- authMechanism&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ssl&lt;/code&gt; doesn&amp;rsquo;t have a value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;authSource&lt;/code&gt; has the value &lt;code&gt;admin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;authMechanism&lt;/code&gt; has the value &lt;code&gt;MONGODB-CR&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ssl&#34;&gt;SSL&lt;/h3&gt;

&lt;p&gt;SSL is enabled for a server by adding the query parameter key &lt;code&gt;ssl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mongodb://mongodb.example.com:12345/myDatabase?ssl&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;authsource&#34;&gt;authSource&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;authSource&lt;/code&gt; indicates that the authentication database differs from the default (admin) or the selected database in the path.&lt;/p&gt;

&lt;p&gt;Where &lt;code&gt;mongodb://mongodb.example.com:12345/myDatabase&lt;/code&gt; will use &lt;code&gt;myDatabase&lt;/code&gt; for authentication and &lt;code&gt;mongodb://mongodb.example.com:12345&lt;/code&gt; will use &lt;code&gt;admin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mongodb://mongodb.example.com:12345/myDatabase?authSource=test&lt;/code&gt; will use &lt;code&gt;admin&lt;/code&gt; for authentication. This is also useful for databases where the user logs in against &lt;code&gt;admin&lt;/code&gt; but the path is used for selecting a database, for example, in the Database initializer.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mongodb://mongodb.example.com:12345/myDatabase?authSource=admin&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;authmechanism&#34;&gt;authMechanism&lt;/h3&gt;

&lt;p&gt;Selects a mechanism that will be used for authentication to the MongoDB server.&lt;/p&gt;

&lt;p&gt;MongoDB supports the following mechanisms:
- SCRAM_SHA_1
- MONGODB-CR
- MONGODB-X509
- GSSAP
- PLAIN&lt;/p&gt;

&lt;p&gt;MongoKitten only supports &lt;code&gt;SCRAM_SHA_1&lt;/code&gt; and &lt;code&gt;MONGODB-CR&lt;/code&gt;, currently.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Count</title>
      <link>http://docs.openkitten.org/tutorials/mongokitten/crud/count/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/tutorials/mongokitten/crud/count/</guid>
      <description>

&lt;h1 id=&#34;counting&#34;&gt;Counting&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;count&lt;/code&gt; can be used on a collection to count all Documents matching the provided requirements. If no requirements are provided, all documents will be counted.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;count&lt;/code&gt; will return the amount of matches.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try collection.count() // returns 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Count also accepts the parameter &lt;code&gt;matching&lt;/code&gt; which requires &lt;a href=&#34;http://docs.openkitten.org/tutorials/mongokitten/QueryBuilder/&#34;&gt;a Query&lt;/a&gt; to be provided.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try collection.count(&amp;quot;first_name&amp;quot; == &amp;quot;Joannis&amp;quot;) // returns 1 if only one user is named Joannis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://mongokitten.openkitten.org/Classes/Collection.html#/s:FC11MongoKitten10Collection5countFzT8matchingGSqVS_5Query_9limitedToGSqVs5Int32_8skippingGSqS2__11readConcernGSqOS_11ReadConcern_9collationGSqVS_9Collation__Si&#34;&gt;For more information about counting documents, click here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create/Insert</title>
      <link>http://docs.openkitten.org/tutorials/mongokitten/crud/create/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/tutorials/mongokitten/crud/create/</guid>
      <description>

&lt;h1 id=&#34;creation&#34;&gt;Creation&lt;/h1&gt;

&lt;p&gt;You can create an entry in MongoDB by &lt;code&gt;insert&lt;/code&gt;ing a Document into a Collection.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let identifier = try collection.insert(document)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The returned identifier is the &lt;code&gt;_id&lt;/code&gt; field in the Document. If no &lt;code&gt;_id&lt;/code&gt; exists in the provided Document parameter an ObjectId will be generated. The &lt;code&gt;_id&lt;/code&gt; field can be of almost any value.&lt;/p&gt;

&lt;p&gt;ObjectId keeps track of the creation date and is unique. Int32 and Int can be used incrementally like is usual in SQL. Strings can also be used. When you&amp;rsquo;re inserting a Document which primarily contains a unique String (like a database migration&amp;rsquo;s description) this description can be the &lt;code&gt;_id&lt;/code&gt; of the Document.&lt;/p&gt;

&lt;p&gt;No two Documents can exist in the same collection with the same &lt;code&gt;_id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also insert an array of Documents which will all be inserted. MongoKitten will return an array of identifiers for each inserted Document.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let identifiers = try collection.insert(contentsOf: [document0, document1, document2])&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cursor</title>
      <link>http://docs.openkitten.org/tutorials/mongokitten/Cursor/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/tutorials/mongokitten/Cursor/</guid>
      <description>

&lt;h1 id=&#34;cursor&#34;&gt;Cursor&lt;/h1&gt;

&lt;p&gt;Cursors are a selector for a subset of data in MongoDB. It can be queried again to extract a subset and most operations can be executed on it. Count, Read, Update, Remove.&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let childrenDocuments: Cursor&amp;lt;Document&amp;gt; = Cursor&amp;lt;Document&amp;gt;(in: database[&amp;quot;users&amp;quot;], where: &amp;quot;age&amp;quot; &amp;lt; 18)

struct User {
  ...

  init?(userDocument: Document) throws {
    ...
  }
}

// flatmaps all results
let childrenUserObjects: Cursor&amp;lt;User&amp;gt; = Cursor(in: database[&amp;quot;users&amp;quot;], where: &amp;quot;age&amp;quot; &amp;lt; 18) { document in
  return try User.init(userDocument: document)
}

// puts all users that are under 18 in an Array
let users: [User] = Array(childrenUserObjects)

let transformedChildrenUserObjects: Cursor&amp;lt;User&amp;gt; = childrenDocuments.flatMap { document in
  return try User.init(userDocument: document)
}

// Sets &amp;quot;child&amp;quot; to `true` for all children
try transformedChildrenUserObjects.update(to: [
  &amp;quot;$set&amp;quot;: [
    &amp;quot;isChild&amp;quot;: true
  ]
])

for child in transformedChildrenUserObjects {
  print(Int(child[&amp;quot;age&amp;quot;])) // prints their age
}

// removes all selected users
try childrenUserObjects.remove()

// All children have been removed, doesn&#39;t return any results

for user in try childrenUserObjects.find() {
  // never runs
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Delete/Remove</title>
      <link>http://docs.openkitten.org/tutorials/mongokitten/crud/delete/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/tutorials/mongokitten/crud/delete/</guid>
      <description>

&lt;h1 id=&#34;removing-documents&#34;&gt;Removing documents&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;remove&lt;/code&gt; removes all Documents (matching the query) but can be limited in the amount of removals. It will return the amount of objects that have been removed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try collection.remove() // returns 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above example will remove all Documents.&lt;/p&gt;

&lt;p&gt;You can specify requirements for the documents that will be removed by adding a &lt;code&gt;matching:&lt;/code&gt; parameter. &lt;a href=&#34;http://docs.openkitten.org/tutorials/mongokitten/QueryBuilder/&#34;&gt;In there you must provide a Query.&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try collection.remove(&amp;quot;first_name&amp;quot; == &amp;quot;Joannis&amp;quot;) // Returns 1, only one user named &amp;quot;Joannis&amp;quot; exists
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you only want to remove one matching document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try collection.remove(limiting: 1) // returns 1, only one Document may be removed. Any document will do because there is no matching filter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://mongokitten.openkitten.org/Classes/Collection.html#/s:FC11MongoKitten10Collection6removeFzT8matchingGSaT6filterVS_5Query5limitVs5Int32__12writeConcernGSqOS_12WriteConcern_15stoppingOnErrorGSqSb__Si&#34;&gt;For more information about removing documents, click here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>