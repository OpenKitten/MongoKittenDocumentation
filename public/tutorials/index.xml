<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials-rsses on MongoDB Swift Driver</title>
    <link>http://docs.openkitten.org/tutorials/index.xml</link>
    <description>Recent content in Tutorials-rsses on MongoDB Swift Driver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 14 Dec 2016 12:36:56 +0000</lastBuildDate>
    <atom:link href="http://docs.openkitten.org/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Aggregation</title>
      <link>http://docs.openkitten.org/tutorials/aggregation/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/tutorials/aggregation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Authentication</title>
      <link>http://docs.openkitten.org/tutorials/connect/authenticating/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/tutorials/connect/authenticating/</guid>
      <description>

&lt;h1 id=&#34;authentication&#34;&gt;Authentication&lt;/h1&gt;

&lt;p&gt;Authentication is done using by either providing a MongoDB connection string or a ClientSettings object.&lt;/p&gt;

&lt;h2 id=&#34;mongodb-connection-string&#34;&gt;MongoDB connection String&lt;/h2&gt;

&lt;p&gt;Authentication via a connection String requires the username and password on the left side of the hostname like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let database = try Database(mongoURL: &amp;quot;mongodb://user:password@hostname&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The username and password need to be URL percent encoded.&lt;/p&gt;

&lt;h3 id=&#34;query-parameters&#34;&gt;Query Parameters&lt;/h3&gt;

&lt;p&gt;You can enable SSL with the query parameter &lt;code&gt;ssl&lt;/code&gt; as described &lt;a href=&#34;http://docs.openkitten.org/tutorials/connect/ssl/&#34;&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you need to authenticate to a specific database other than &amp;ldquo;admin&amp;rdquo; you can provide an &amp;ldquo;authSource&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let database = try Database(mongoURL: &amp;quot;mongodb://user:password@hostname?authSource=myauthdb&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if you need an authentication mechanism other than SCRAM you can select one using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let database = try Database(mongoURL: &amp;quot;mongodb://user:password@hostname?authMechanism=SCRAM_SHA_1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We currently only support &amp;ldquo;SCRAM_SHA_1&amp;rdquo; and &amp;ldquo;MONGODB-CR&amp;rdquo;. Although other mechanisms can be implemented in the future.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Collection CRUD Operations</title>
      <link>http://docs.openkitten.org/tutorials/crud/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/tutorials/crud/</guid>
      <description>

&lt;h1 id=&#34;crud&#34;&gt;CRUD&lt;/h1&gt;

&lt;p&gt;In &lt;a href=&#34;No page found with path or logical name &#34;tutorials/connect.md&#34;.
&#34;&gt;the setup guide&lt;/a&gt; we&amp;rsquo;ve covered how you can open a Database and from there a Collection. Collections are the storage place in MongoDB like tables for SQL databases.&lt;/p&gt;

&lt;p&gt;From a collection object we can start interacting with our data. From here we&amp;rsquo;ll cover all parts of CRUD.
(Create, Read, Update, Delete). And we&amp;rsquo;ll assume you have a Collection available as the variable &lt;code&gt;collection&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Collections Administration</title>
      <link>http://docs.openkitten.org/tutorials/collections/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/tutorials/collections/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Connect to MongoDB</title>
      <link>http://docs.openkitten.org/tutorials/connect/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/tutorials/connect/</guid>
      <description>

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;MongoKitten is initializable on Server or Database level. Server objects allow access to every database - if the account you use to authenticate has the permissions to - and is generally not used.&lt;/p&gt;

&lt;p&gt;Database is initializable separately and allows access to a single database on a MongoDB server. You can still access the server object from the Database and access other parts of the server via there if this is necessary.&lt;/p&gt;

&lt;p&gt;You can instantiate a Server using a MongoDB connection URL/String:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let server = try Server(mongoURL: &amp;quot;mongodb://localhost&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The database also has two initializers. One accepts a connection URL as String. The database which is accessed is equal to the authentication database in this case.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let database = try Database(mongoURL: &amp;quot;mongodb://user:password@ds12345-a0.domain.com:25078,ds12345-a1.domain.com:25078/kitten?replicaSet=rs-ds125078&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively you can create a server object and select the database from there:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let server = try Server(mongoURL: &amp;quot;mongodb://localhost&amp;quot;)

let database = server[&amp;quot;my-database-name&amp;quot;]
let database = Database(named: &amp;quot;my-database-name&amp;quot;, atServer: server)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Last but not least you can select a collection/table within a database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let usersCollection = database[&amp;quot;users&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From here you can interact with every part of MongoKitten.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Count</title>
      <link>http://docs.openkitten.org/tutorials/crud/count/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/tutorials/crud/count/</guid>
      <description>

&lt;h1 id=&#34;counting&#34;&gt;Counting&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;count&lt;/code&gt; can be used on a collection to count all Documents matching the provided requirements. If no requirements are provided, all documents will be counted.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;count&lt;/code&gt; will return the amount of matches.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try collection.count() // returns 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Count also accepts the parameter &lt;code&gt;matching&lt;/code&gt; which requires &lt;a href=&#34;http://docs.openkitten.org/tutorials/QueryBuilder/&#34;&gt;a Query&lt;/a&gt; to be provided.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try collection.count(matching: &amp;quot;first_name&amp;quot; == &amp;quot;Joannis&amp;quot;) // returns 1 if only one user is named Joannis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://mongokitten.openkitten.org/Classes/Collection.html#/s:FC11MongoKitten10Collection5countFzT8matchingGSqVS_5Query_9limitedToGSqVs5Int32_8skippingGSqS2__11readConcernGSqOS_11ReadConcern_9collationGSqVS_9Collation__Si&#34;&gt;For more information about counting documents, click here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create/Insert</title>
      <link>http://docs.openkitten.org/tutorials/crud/create/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/tutorials/crud/create/</guid>
      <description>

&lt;h1 id=&#34;creation&#34;&gt;Creation&lt;/h1&gt;

&lt;p&gt;You can create an entry in MongoDB by &lt;code&gt;insert&lt;/code&gt;ing a Document into a Collection.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let identifier = try collection.insert(document)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The returned identifier is the &lt;code&gt;_id&lt;/code&gt; field in the Document. If no &lt;code&gt;_id&lt;/code&gt; exists in the provided Document parameter an ObjectId will be generated. The &lt;code&gt;_id&lt;/code&gt; field can be of almost any value.&lt;/p&gt;

&lt;p&gt;ObjectId keeps track of the creation date and is unique. Int32 and Int64 can be used incrementally like is usual in SQL. Strings can also be used. When you&amp;rsquo;re inserting a Document which primarily contains a unique String (like a database migration&amp;rsquo;s description) this description can be the &lt;code&gt;_id&lt;/code&gt; of the Document.&lt;/p&gt;

&lt;p&gt;No two Documents can exist in the same collection with the same &lt;code&gt;_id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also insert an array of Documents which will all be inserted. MongoKitten will return an array of identifiers for each inserted Document.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let identifiers = try collection.insert([document0, document1, document2])&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cursor</title>
      <link>http://docs.openkitten.org/tutorials/Cursor/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/tutorials/Cursor/</guid>
      <description>

&lt;h1 id=&#34;cursor&#34;&gt;Cursor&lt;/h1&gt;

&lt;p&gt;All larger result sets in MongoKitten are encapsulated in a Cursor.&lt;/p&gt;

&lt;p&gt;Cursors are a pointer to a set of data on the MongoDB instance, not locally in-memory.
When looped over the cursor&amp;rsquo;s contents the Cursor will fetch a batch X Documents from the server and make them available to the user. Whenever more are requested the Cursor will fetch the next batch of Documents. The amount of Documents fetched at a time is configurable in most commands with a &lt;code&gt;withBatchSize&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;A big amount of Documents could benefit enormously from &lt;code&gt;withBatchSize&lt;/code&gt; at 1000 but the Document grouped together may not be bigger than 48MB. Luckily, this rarely happens unless you store binary data like images inside the Documents. A batchSize of 1000 would still leave 48KB of data per Document.&lt;/p&gt;

&lt;h2 id=&#34;mapping-transforming&#34;&gt;Mapping/Transforming&lt;/h2&gt;

&lt;p&gt;When you&amp;rsquo;re executing a &lt;code&gt;find&lt;/code&gt; command on a Collection, it&amp;rsquo;s likely this collection stores data of a certain type. Like all users, all articles etc. For this purpose Cursor has a mechanism to map incoming Documents to other types or even those other types to more specialized types.&lt;/p&gt;

&lt;p&gt;Assuming you have stored &lt;code&gt;Cursor&amp;lt;Document&amp;gt;&lt;/code&gt; received from calling a &lt;code&gt;find&lt;/code&gt; method on Collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import BSON
import MongoKitten

struct User {
  let username: String
  init?(fromDocument document: Document) {
    guard let username = document[&amp;quot;username&amp;quot;] as String? else {
      return nil
    }

    self.username = username
  }
}

let usersCursor = Cursor(basicDocumentCursor) { document in
  return User(fromDocument: document)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Delete/Remove</title>
      <link>http://docs.openkitten.org/tutorials/crud/delete/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/tutorials/crud/delete/</guid>
      <description>

&lt;h1 id=&#34;removing-documents&#34;&gt;Removing documents&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;remove&lt;/code&gt; removes all Documents (matching the query) but can be limited in the amount of removals. It will return the amount of objects that have been removed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try collection.remove() // returns 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above example will remove all Documents.&lt;/p&gt;

&lt;p&gt;You can specify requirements for the documents that will be removed by adding a &lt;code&gt;matching:&lt;/code&gt; parameter. &lt;a href=&#34;http://docs.openkitten.org/tutorials/QueryBuilder/&#34;&gt;In there you must provide a Query.&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try collection.remove(matching: &amp;quot;first_name&amp;quot; == &amp;quot;Joannis&amp;quot;) // Returns 1, only one user named &amp;quot;Joannis&amp;quot; exists
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you only want to remove one matching document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try collection.remove(limitedTo: 1) // returns 1, only one Document may be removed. Any document will do because there is no matching filter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://mongokitten.openkitten.org/Classes/Collection.html#/s:FC11MongoKitten10Collection6removeFzT8matchingGSaT6filterVS_5Query5limitVs5Int32__12writeConcernGSqOS_12WriteConcern_15stoppingOnErrorGSqSb__Si&#34;&gt;For more information about removing documents, click here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GridFS</title>
      <link>http://docs.openkitten.org/tutorials/gridfs/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/tutorials/gridfs/</guid>
      <description>

&lt;h1 id=&#34;gridfs&#34;&gt;GridFS&lt;/h1&gt;

&lt;p&gt;GridFS is a standard for using MongoDB as file storage through the MongoDB binary type. MongoDB allows you to store documents up to 16MB in size, which is useful for storing PDFs, profile pictures and other binary data. But if you want to store bigger data than 16MB you&amp;rsquo;ll need to store it over multiple documents. GridFS fulfills that task.&lt;/p&gt;

&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;GridFS is a bucket consisting of two collections. This means that two collections have the same prefix separating their own bucket name with a dot (&lt;code&gt;.&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;GridFS uses the &lt;code&gt;fs&lt;/code&gt; prefix by default and then appends the bucket names &lt;code&gt;files&lt;/code&gt; and &lt;code&gt;chunks&lt;/code&gt; to create a &lt;code&gt;fs.files&lt;/code&gt; collection and &lt;code&gt;fs.chunks&lt;/code&gt; collection. Files stores the metadata, chunks stores the binary information for the files.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let fs = db.makeGridFS()&lt;/code&gt; will get you the GridFS instance.&lt;/p&gt;

&lt;h2 id=&#34;using-gridfs&#34;&gt;Using GridFS&lt;/h2&gt;

&lt;p&gt;MongoKitten&amp;rsquo;s GridFS supports three methods of mutation.&lt;/p&gt;

&lt;p&gt;Create/store, Read/find and Remove/delete.&lt;/p&gt;

&lt;h3 id=&#34;storing-files&#34;&gt;Storing files&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let data: [UInt8] = []
let fileID = try fs.store(data: myData, named: &amp;quot;data.txt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;removing-files&#34;&gt;Removing files&lt;/h3&gt;

&lt;p&gt;Files can only be removed by their identifier because you wouldn&amp;rsquo;t want to remove all files accidentally. For that we have &lt;code&gt;try fs.drop()&lt;/code&gt; which drops the collections.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try fs.remove(byId: fileID)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;finding-files&#34;&gt;Finding files&lt;/h3&gt;

&lt;p&gt;This functions similarly to Collection. But instead of returning a cursor containing Documents it returns a &lt;code&gt;GridFS.File&lt;/code&gt; cursor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let allFiles = try fs.find()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find single files using findOne similarly to Collection.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let file: GridFS.File? = try fs.findOne(byID: fileID)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;reading-files&#34;&gt;Reading files&lt;/h3&gt;

&lt;p&gt;Once you&amp;rsquo;ve obtained an instance of &lt;code&gt;GridFS.File&lt;/code&gt; you&amp;rsquo;ve only fetched the metadata. Meaning the filename, mime type, MD5 checksum and any other metadata that this file contains.&lt;/p&gt;

&lt;p&gt;You can use this file instance to fetch either all or specific sets of bytes. In the case of a smaller download, or a download that&amp;rsquo;ll need to be served in it&amp;rsquo;s entirely.&lt;/p&gt;

&lt;p&gt;To fetch all bytes you&amp;rsquo;ll need to iterate over the chunks and send those chunks over the socket stream chunk-by-chunk.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;for chunk in file {
  socket.send(chunk.data)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can interrupt this process at any time efficiently without fetching extra data from MongoDB.&lt;/p&gt;

&lt;p&gt;MongoKitten will not throw an error when an error occurs when iterating over the file chunks using this method and will instead return no (additional) chunks. This may not always cause harm. In some situations it will result in an aborted or corrupted download which may or may not be a problem. In an image it&amp;rsquo;ll result in a partially loaded image, in a video it&amp;rsquo;ll result in the inability to load some parts of the movie and some file formats like PDF may be unable to open and need to be re-downloaded.&lt;/p&gt;

&lt;p&gt;If you want to set up a failsafe for these scenarios you&amp;rsquo;ll need to use the &lt;code&gt;try file.chunked()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;for chunk in try file.chunked() {
  socket.send(chunk.data)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default most frameworks will be unable to serve the file properly which results in the same situation as above. But if you catch the error manually you may be able to fetch the remaining data by re-trying to fetch the remaining chunks. This can be useful when the used replica set or sharded cluster has had a failure because it&amp;rsquo;s been disabled for maintainance or another reason, or simply to log the problem.&lt;/p&gt;

&lt;h3 id=&#34;resumed-downloads&#34;&gt;Resumed downloads&lt;/h3&gt;

&lt;p&gt;Some larger files and web-browsers may use a functionality that allows resuming downloads. Videos use them for buffering, by downloading the relevant parts of the videos when required allowing you to start watching the first bit whilst the rest is still buffering. Other big files may use this web-feature for resuming big downloads after a connection problem has occurred. Or you may have another use case scenario.&lt;/p&gt;

&lt;p&gt;MongoKitten allows you to fetch specific subsets of information from GridFS.&lt;/p&gt;

&lt;p&gt;You can request all bytes after byte 1 million (1MB) for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try file.read(from: 1_000_000)`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can request a limited subset of bytes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try file.read(from: 1_000_000, to: 2_500_000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would fetch 1.5MB of data starting after 1MB.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Indexes</title>
      <link>http://docs.openkitten.org/tutorials/Indexes/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/tutorials/Indexes/</guid>
      <description>

&lt;h1 id=&#34;indexes&#34;&gt;Indexes&lt;/h1&gt;

&lt;p&gt;Indexes allow you to quickly search for specific information. When you&amp;rsquo;re frequently querying the same information it is recommended to create an index for this field. Do &lt;em&gt;not&lt;/em&gt; index all your fields, this will actually reduce the performance of your application rather than increasing it.&lt;/p&gt;

&lt;h2 id=&#34;text&#34;&gt;Text&lt;/h2&gt;

&lt;p&gt;Text indexes are used by MongoDB to allow you to query a collection for Documents matching the text. Like a search engine.&lt;/p&gt;

&lt;p&gt;They are easily created like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try collection.createIndex(withParameters: .text([&amp;quot;keys&amp;quot;, &amp;quot;in&amp;quot;, &amp;quot;document&amp;quot;]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;No page found with path or logical name &#34;tutorials/QueryBuilder/&#34;.
&#34;&gt;Querying text indexes using the query builder is simple.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;unique&#34;&gt;Unique&lt;/h2&gt;

&lt;p&gt;Unique indexes require any documents inserted in the collection to have a unique value for this key.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try collection.createIndex(withParameters: .unique, .compound(fields: [
    &amp;quot;uniqueKey&amp;quot;: 1,
    &amp;quot;otherUniqueKey&amp;quot;: 1
]))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>QueryBuilder</title>
      <link>http://docs.openkitten.org/tutorials/QueryBuilder/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/tutorials/QueryBuilder/</guid>
      <description>

&lt;h1 id=&#34;query&#34;&gt;Query&lt;/h1&gt;

&lt;p&gt;Query is the object that will find data for you. It&amp;rsquo;s used in all CRUD operations except insert. It&amp;rsquo;s used for finding the Document you want to fetch/modify/delete.&lt;/p&gt;

&lt;p&gt;There are two method of creating a Query. You can create a Query manually from a Document or you can use the operators. Operator based queries are means for simple queries only.&lt;/p&gt;

&lt;p&gt;This would be an example of an operator based query&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let firstName = &amp;quot;Bob&amp;quot;
let surName = &amp;quot;de Boer&amp;quot;
let query: Query = &amp;quot;name_first&amp;quot; == firstName

try usersCollection.findOne(matching: &amp;quot;name_first&amp;quot; == firstName &amp;amp;&amp;amp; &amp;quot;name_last&amp;quot; == surName &amp;amp;&amp;amp; &amp;quot;age&amp;quot; &amp;lt; 24)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From here on we&amp;rsquo;ll only define the Query, and we&amp;rsquo;ll leave it up to you to put it in a matching parameter of a Count/Read/Update/Delete operation.&lt;/p&gt;

&lt;h2 id=&#34;helpers&#34;&gt;Helpers&lt;/h2&gt;

&lt;p&gt;QueryBuilder has a few build-in helpers.&lt;/p&gt;

&lt;h3 id=&#34;text-searching&#34;&gt;$text searching&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;re looking for a piece of text in a document you can use &lt;code&gt;.textSearch&lt;/code&gt; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let query: Query = .textSearch(forString: &amp;quot;cookie&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will match any documents in the collection where the text index has indexed a field in the Document to contain &amp;ldquo;cookie&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;This will require you to create a &lt;a href=&#34;http://docs.openkitten.org/tutorials/Indexes/#text&#34;&gt;text index&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;raw&#34;&gt;Raw&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re in need for more raw MongoDB queries you can create one from a Document.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let document: Document = [
  &amp;quot;name_first&amp;quot;: firstName,
  &amp;quot;name_last&amp;quot;: surName,
  &amp;quot;age&amp;quot;: [ &amp;quot;$lt&amp;quot;: 24]
]

try usersCollection.findOne(matching: Query(document))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or you can use a Document literal for a Query:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try usersCollection.findOne(matching: [
  &amp;quot;name_first&amp;quot;: firstName,
  &amp;quot;name_last&amp;quot;: surName,
  &amp;quot;age&amp;quot;: [ &amp;quot;$lt&amp;quot;: 24]
])
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Read/Find</title>
      <link>http://docs.openkitten.org/tutorials/crud/read/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/tutorials/crud/read/</guid>
      <description>

&lt;h1 id=&#34;reading-finding&#34;&gt;Reading/finding&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;find&lt;/code&gt; can be ran without arguments to fetch every Document in the collection.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;try collection.find()&lt;/code&gt; will return a &lt;a href=&#34;http://docs.openkitten.org/tutorials/Cursor/&#34;&gt;Cursor&lt;/a&gt; containing all Documents. Cursors are an important part of the MongoKitten flow but we&amp;rsquo;ll cover them in short here.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;try collection.findOne()&lt;/code&gt; will return a single &lt;code&gt;Document?&lt;/code&gt;. Which is nil if no Document could be found.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Array&lt;/code&gt; initializer can be used on the Cursor to create an &lt;code&gt;Array&amp;lt;Document&amp;gt;&lt;/code&gt; containing all results.
This is recommended when you definitely need all results. Looping over a Cursor is recommended when you don&amp;rsquo;t necessarily need all results and might stop in the middle of the process. &lt;code&gt;Array&lt;/code&gt; isn&amp;rsquo;t any better than Cursor other than providing the ability to count the results without an extra query. However, it does use more RAM.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let documentArray = Array(try collection.find())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can specify 6 parameters which we&amp;rsquo;ll all cover underneath which, of course, can be combined.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;find&lt;/code&gt; accepts &lt;a href=&#34;http://docs.openkitten.org/tutorials/QueryBuilder/&#34;&gt;a Query&lt;/a&gt; that Documents are matched against. You can create a Query from a Document or using operators.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let document = [
  &amp;quot;username&amp;quot;: &amp;quot;bob&amp;quot;
]
let query = Query(document)

try collection.find(matching: query)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let query: Query = &amp;quot;username&amp;quot; == &amp;quot;bob&amp;quot;

try collection.find(matching: query)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the order of the results matters, for example, when presenting your user a table of results based on their preference. Alphabetically, numerically or otherwise, you can specify a &lt;code&gt;Sort&lt;/code&gt; order where you can specify per-field the order in which the fields must be sorted.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let sort: Sort = [
  &amp;quot;integer&amp;quot;: .ascending,
  &amp;quot;date&amp;quot;: .descending
]

try collection.find(sortedBy: sort)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don&amp;rsquo;t need all information from the Document you can more efficiently fetch data by providing a projection. The &lt;code&gt;_id&lt;/code&gt; key will be included unless specifically disabled.&lt;/p&gt;

&lt;p&gt;Suppose the following Document resides in the database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let document: Document = [
  &amp;quot;_id&amp;quot;: try ObjectId(&amp;quot;abcdefabcdefabcdefabcdef&amp;quot;),
  &amp;quot;key0&amp;quot;: &amp;quot;henk&amp;quot;,
  &amp;quot;key1&amp;quot;: true,
  &amp;quot;key2&amp;quot;: 3,
  &amp;quot;key3&amp;quot;: [
    &amp;quot;key4&amp;quot;: &amp;quot;value0&amp;quot;
  ]
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following projection will return the keys &lt;code&gt;_id&lt;/code&gt;, &lt;code&gt;key1&lt;/code&gt; and &lt;code&gt;key2&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let projection: Projection = [&amp;quot;key1&amp;quot;, &amp;quot;key2&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following projections will return &lt;code&gt;key2&lt;/code&gt; and &lt;code&gt;key3&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let projection0: Projection = [
  &amp;quot;_id&amp;quot;: false,
  &amp;quot;key2&amp;quot;: true,
  &amp;quot;key3&amp;quot;: true
]

let projection1: Projection = [
  &amp;quot;_id&amp;quot;: .excluded,
  &amp;quot;key2&amp;quot;: .included,
  &amp;quot;key3&amp;quot;: .included
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Applying this projection to limit the returned fields is simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try collection.find(projecting: projection0)
try collection.find(projecting: projection1)
try collection.find(projecting: [&amp;quot;_id&amp;quot;: false, &amp;quot;key0&amp;quot;: .included])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don&amp;rsquo;t want the first X results you can skip those. If 5 documents match the find query and the skip is set so 4, the last Document is returned. If the skip is set to 2, the last 3 documents will be returned. If the skip is set to 5, no Documents will be returned.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try collection.find(skipping: 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if you don&amp;rsquo;t want more than X results you can specify a limit. If 5 documents match the find query and the limit is set to 7, 5 Documents will be returned. If the limit is set to 3, the first 3 Documents will be returned.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try collection.find(limitedTo: 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Find queries also accept a batchSize.&lt;/p&gt;

&lt;p&gt;The batch size is important with respect to efficiency and performance. Cursors return &lt;code&gt;batchSize&lt;/code&gt; of Documents with every fetch. And a fetch is done whenever more Documents are required. When looping over a cursor containing 100 Documents with a batchSize of 10, 10 queries will be done to fetch all results. The default value is 100 Documents per query. A Document can be up to 16 MB and MongoDB usually only communicates 48 MB per message.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re fetching a lot of small Documents a higher batchSize is useful. If you&amp;rsquo;re fetching a lot of big Documents, a smaller batchSize is necessary. And if you&amp;rsquo;re fetching and processing all Documents like &lt;code&gt;Array(collection.find(...))&lt;/code&gt; or a &lt;code&gt;for document in collection.find(...)&lt;/code&gt; that doesn&amp;rsquo;t break out of the loop it&amp;rsquo;s generally better to fetch more Documents per query to reduce the amount of communication and delay.&lt;/p&gt;

&lt;p&gt;Most MongoDB servers don&amp;rsquo;t accept values over 1000.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SSL Settings</title>
      <link>http://docs.openkitten.org/tutorials/connect/ssl/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/tutorials/connect/ssl/</guid>
      <description>

&lt;h1 id=&#34;tls-ssl&#34;&gt;TLS/SSL&lt;/h1&gt;

&lt;p&gt;MongoKitten supports TLS/SSL connections to MongoDB that support TLS/SSL support.&lt;/p&gt;

&lt;p&gt;You can add the query parameter &amp;ldquo;ssl&amp;rdquo; to your connection string &lt;code&gt;mongodb://.....?ssl&lt;/code&gt; or enable SSL in the ClientSettings when initializing a Server. SSLSettings are an immutable part of the ClientSettings, so any configuration will have to be done prior to initializing a ClientSettings object with SSLSettings. SSL configuration be done using secure defaults by initializing it with a &lt;code&gt;true&lt;/code&gt; literal.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var sslSettings: SSLSettings = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These sslSettings can then be modified to accept a specific certificate or even allow unverified hostnames and/or certificates.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>http://docs.openkitten.org/tutorials/tutorials/</link>
      <pubDate>Wed, 14 Dec 2016 12:36:56 +0000</pubDate>
      
      <guid>http://docs.openkitten.org/tutorials/tutorials/</guid>
      <description>

&lt;h1 id=&#34;tutorials&#34;&gt;Tutorials&lt;/h1&gt;

&lt;p&gt;The tutorials in this section provide examples of some frequently used operations. This section is not meant to be an exhaustive list of all operations available in the Node.js driver.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.openkitten.org/tutorials/connect/&#34;&gt;Connect to MongoDB&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;No page found with path or logical name &#34;tutorials/crud.md&#34;.
&#34;&gt;Collection CRUD Operations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.openkitten.org/tutorials/QueryBuilder/&#34;&gt;Query Builder&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.openkitten.org/tutorials/aggregation/&#34;&gt;Aggregation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.openkitten.org/tutorials/collections/&#34;&gt;Collection Administration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.openkitten.org/tutorials/Administration/&#34;&gt;Database and Server Administration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.openkitten.org/tutorials/gridfs/&#34;&gt;GridFS&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>