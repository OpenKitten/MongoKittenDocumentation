<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bsons on MongoDB Swift Driver</title>
    <link>http://docs.openkitten.org/bson/index.xml</link>
    <description>Recent content in Bsons on MongoDB Swift Driver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 26 Dec 2016 12:14:08 +0100</lastBuildDate>
    <atom:link href="http://docs.openkitten.org/bson/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Document</title>
      <link>http://docs.openkitten.org/bson/Document/</link>
      <pubDate>Mon, 26 Dec 2016 12:14:08 +0100</pubDate>
      
      <guid>http://docs.openkitten.org/bson/Document/</guid>
      <description>

&lt;h1 id=&#34;document&#34;&gt;Document&lt;/h1&gt;

&lt;p&gt;Document is the primary type of BSON. It&amp;rsquo;s either a Dictionary or Array and allows interaction like a native Swift Dictionary or Array.&lt;/p&gt;

&lt;h2 id=&#34;basic-usage&#34;&gt;Basic Usage&lt;/h2&gt;

&lt;p&gt;Documents are usable like any other Swift dictionary/array. Only you&amp;rsquo;ll need to explicitely specify your variable to be a Document.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let document: Document = [
	&amp;quot;my&amp;quot;: &amp;quot;data&amp;quot;,
	&amp;quot;isAwesome&amp;quot;: true
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let document = [
	&amp;quot;my&amp;quot;: &amp;quot;data&amp;quot;,
	&amp;quot;isAwesome&amp;quot;: true
] as Document
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, if you need an Array, you can use the Array literal.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let arrayDocument = [
	1, 2, 3, 4, 5
]

let arrayDocument2 = [
	&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;e&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two restrictions to a Document.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the Document is a Dictionary, the key &lt;em&gt;must&lt;/em&gt; be a String&lt;/li&gt;
&lt;li&gt;The Value in both the Dictionary and Array for &lt;em&gt;must&lt;/em&gt; be a ValueConvertible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, ValueConvertible is a protocol that, by defaut, supports BSON primitives. BSON Primitives can always be used. And custom types can be ValueConvertible.&lt;/p&gt;

&lt;p&gt;Documents allow various methods of initializing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let document0 = Document()
let document1 = Document(array: ...)
let document2 = Document(dictionaryElements: ...)
let document3 = Document(data: [5, 0, 0, 0, 0])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;They allow actions like an array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var document: Document = [1, 2, 3, 4, 5]

document.append(6)
document[3] // 4
document.count // 6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or actions like a Dictionary:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var document: Document = [
	&amp;quot;key0&amp;quot;: 0,
	&amp;quot;key1&amp;quot;: 1,
	&amp;quot;key2&amp;quot;: 2,
	&amp;quot;key3&amp;quot;: 3
]

document[&amp;quot;key1&amp;quot;] // 1
document[&amp;quot;key4&amp;quot;] // nil
document[&amp;quot;key4&amp;quot;] = 4
document[&amp;quot;key4&amp;quot;] // 4

document.keys // [&amp;quot;key0&amp;quot;, &amp;quot;key1&amp;quot;, &amp;quot;key2&amp;quot;, &amp;quot;key3&amp;quot;, &amp;quot;key4&amp;quot;]
document.values // [0, 1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dictionary Documents act like you would expect.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let document: Document = [
  &amp;quot;hey&amp;quot;: true,
  &amp;quot;hello&amp;quot;: 3.33
]

for (key, value) in document {
	guard key == &amp;quot;hey&amp;quot; || key == &amp;quot;hello&amp;quot; else {
		fatalError(&amp;quot;Impossible!&amp;quot;)
	}

  guard Bool(value) == true || Double(value) == 3.33 else {
		fatalError(&amp;quot;Impossible!&amp;quot;)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Array Documents act in a similar way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let document: Document = [true, false, 3.3, false, true]

for (key, value) in document {
	guard [&amp;quot;0&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;].contains(key) else {
		fatalError(&amp;quot;The key in an array is the position as string number&amp;quot;)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Documents can be easily embedded inside each other. Because of this we allow you to easily subscript a Document to access sub-Documents and even deeper layers of the structure using variadic subscripts.&lt;/p&gt;

&lt;p&gt;These subscripts accept Strings (for Dictionary Document keys) and &lt;code&gt;Int&lt;/code&gt;egers (for Array positions or Dictionary positions). These work like you would expect from any other Array or Dictionary.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var document = [
	&amp;quot;subdoc&amp;quot;: [
		&amp;quot;subsubdoc&amp;quot;: [
			&amp;quot;array&amp;quot;: [0, false, true, &amp;quot;henk&amp;quot;]
		]
	]
]

// Get element position 2 from array in subsubdoc in subdoc in document
let trueBoolean = document[&amp;quot;subdoc&amp;quot;][&amp;quot;subsubdoc&amp;quot;][&amp;quot;array&amp;quot;][2] // true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Document also provides some extra features that are commonly used with BSON:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var document: Document = [
	&amp;quot;key&amp;quot;: true,
	&amp;quot;subdoc&amp;quot;: [
	  &amp;quot;value&amp;quot;: 3
	]
]

document[dotNotated: &amp;quot;subdoc.value&amp;quot;] // 3

document.flattened() // [&amp;quot;key&amp;quot;: true, &amp;quot;subdoc.value&amp;quot;: 3]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ObjectId</title>
      <link>http://docs.openkitten.org/bson/ObjectId/</link>
      <pubDate>Mon, 26 Dec 2016 12:13:13 +0100</pubDate>
      
      <guid>http://docs.openkitten.org/bson/ObjectId/</guid>
      <description>

&lt;h1 id=&#34;objectid&#34;&gt;ObjectId&lt;/h1&gt;

&lt;p&gt;ObjectId is the primary form of identification in MongoDB. ObjectId is a 12 bytes long identifier consisting of non- pseudo- and fully random components.&lt;/p&gt;

&lt;p&gt;ObjectId contains metadata about the creation date in UNIX epoch time, the machine identifer and process ID that created it as well as a random number that&amp;rsquo;s incremented.&lt;/p&gt;

&lt;p&gt;ObjectId is often represented as a 24-character hexadecimal string which is useful in places like an URL&lt;/p&gt;

&lt;p&gt;I.E. &lt;code&gt;https://example.com/users/1234567890abcdef12345678/profile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;MongoKitten ObjectId values are easily generated using an empty initializer: &lt;code&gt;ObjectId()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Alternatively they&amp;rsquo;re initializable using a hexadecimal String representation like &lt;code&gt;&amp;quot;1234567890abcdef12345678&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let hexString = &amp;quot;1234567890abcdef12345678&amp;quot;
let objectId = try ObjectId(hexString)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In some cases you might want to know the ObjectIds creation date. You can fetch a &lt;code&gt;Foundation.Date&lt;/code&gt; from the ObjectId using &lt;code&gt;let objectIdCreationDate = myObjectId.epoch&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Last but not least, ObjectIds are hashable, so they&amp;rsquo;re usable for a key in a Dictionary, but not a Document.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dictionary: [ObjectId: Document] = [
  ObjectId(): ...,
  ObjectId(): ...
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the case of MongoKitten/MongoDB this may be useful when you&amp;rsquo;re creating a cache for information from the database. Instead of re-fetching this data from the database you can identify the data using the ObjectId identifier easily.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BSONPrimitive</title>
      <link>http://docs.openkitten.org/bson/Primitive/</link>
      <pubDate>Mon, 26 Dec 2016 12:09:53 +0100</pubDate>
      
      <guid>http://docs.openkitten.org/bson/Primitive/</guid>
      <description>

&lt;h1 id=&#34;bson-primitive&#34;&gt;BSON Primitive&lt;/h1&gt;

&lt;p&gt;BSON is based upon a set of primitive types. These are described &lt;a href=&#34;http://bsonspec.org/spec.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this BSON library we contain a protocol: &lt;code&gt;BSONPrimitive&lt;/code&gt;. This protocol is public and should normally &lt;em&gt;not&lt;/em&gt; be implemented on an existing object.&lt;/p&gt;

&lt;p&gt;This protocol is here to support all native Swift types that are related to an existing MongoDB type. Examples of this would be &lt;code&gt;Int&lt;/code&gt; &lt;code&gt;Bool&lt;/code&gt; &lt;code&gt;String&lt;/code&gt;, but also custom BSON types like &lt;code&gt;JavascriptCode&lt;/code&gt; and &lt;code&gt;Binary&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;BSONPrimitives are representable as BSON binary data that can be put into the Value position of a(n) (array-)Document.&lt;/p&gt;

&lt;p&gt;These primitives also have a typeIdentifier that identifies the type of the binary data.&lt;/p&gt;

&lt;p&gt;Adding custom types that does not conform to an unsupported/custom version of the BSON specification will &lt;em&gt;not&lt;/em&gt; be deserialized and will result in corrupt data.&lt;/p&gt;

&lt;p&gt;The list of BSON Primitives:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Double&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;No page found with path or logical name &#34;tutorials/bsonDocument.md&#34;.
&#34;&gt;Document&lt;/a&gt; (Array and Dictionary)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;No page found with path or logical name &#34;tutorials/bsonObjectId.md&#34;.
&#34;&gt;ObjectId&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bool&lt;/li&gt;
&lt;li&gt;Int32&lt;/li&gt;
&lt;li&gt;Int (Int64)&lt;/li&gt;
&lt;li&gt;Binary&lt;/li&gt;
&lt;li&gt;Decimal128&lt;/li&gt;
&lt;li&gt;JavascriptCode&lt;/li&gt;
&lt;li&gt;Null (not nil)&lt;/li&gt;
&lt;li&gt;Date (from Foundation)&lt;/li&gt;
&lt;li&gt;MinKey&lt;/li&gt;
&lt;li&gt;MaxKey&lt;/li&gt;
&lt;li&gt;NSRegularExpression (or RegularExpression on Linux)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conversion&#34;&gt;Conversion&lt;/h2&gt;

&lt;p&gt;All BSON Primitive types can be used as the value in a Document. If you want to extract a value from a Document you&amp;rsquo;ll need to subscript the Document and initialize the expected type with the subscript outcome:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let doc: Document = [
  &amp;quot;food&amp;quot;: &amp;quot;cheese&amp;quot;,
  &amp;quot;age&amp;quot;: 3,
  &amp;quot;favouriteNumber&amp;quot;: &amp;quot;3&amp;quot;,
  &amp;quot;male&amp;quot;: true
]

String(doc[&amp;quot;food&amp;quot;]) // &amp;quot;cheese&amp;quot;
Int(doc[&amp;quot;food&amp;quot;]) // nil
Int(doc[&amp;quot;age&amp;quot;]) // 3
String(doc[&amp;quot;age&amp;quot;]) // &amp;quot;3&amp;quot;
Int(doc[&amp;quot;favouriteNumber&amp;quot;]) // 3
String(doc[&amp;quot;favouriteNumber&amp;quot;]) // &amp;quot;3&amp;quot;
Bool(doc[&amp;quot;male&amp;quot;]) // true
Bool(doc[&amp;quot;nonExistentKey&amp;quot;]) // nil
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>BSON</title>
      <link>http://docs.openkitten.org/bson/BSON/</link>
      <pubDate>Mon, 26 Dec 2016 12:07:42 +0100</pubDate>
      
      <guid>http://docs.openkitten.org/bson/BSON/</guid>
      <description>

&lt;h2 id=&#34;a-native-fast-bson-library-for-swift-written-in-swift&#34;&gt;A native, fast BSON library for Swift, written in Swift.&lt;/h2&gt;

&lt;p&gt;BSON is parsed and generated as specified for version 1.0 of the &lt;a href=&#34;http://bsonspec.org/spec.html&#34;&gt;BSON specification&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;compatibility&#34;&gt;Compatibility&lt;/h3&gt;

&lt;h5 id=&#34;operating-systems&#34;&gt;Operating systems&lt;/h5&gt;

&lt;p&gt;All versions starting with BSON 1.3 are compatible with OS X and Ubuntu 15.10. Other operating systems may work but are untested.&lt;/p&gt;

&lt;h5 id=&#34;swift-version&#34;&gt;Swift Version&lt;/h5&gt;

&lt;p&gt;We support the Swift version specified in .swift_version, which most of the time is the latest version of Swift when a version is released.&lt;/p&gt;

&lt;p&gt;For every new Swift snapshot we release a new minor version.&lt;/p&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;The supported method for using this library is trough the Swift Package manager, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import PackageDescription

let package = Package(
    name: &amp;quot;MyApp&amp;quot;,
    dependencies: [.Package(url: &amp;quot;https://github.com/OpenKitten/BSON.git&amp;quot;, majorVersion: 4)]
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;basic-usage&#34;&gt;Basic Usage&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Create a document using a dictionary literal
let document: Document = [
            &amp;quot;hello&amp;quot;: &amp;quot;I am a BSON document&amp;quot;,
            &amp;quot;temperature&amp;quot;: 42.5
        ]

// Retreive the BSON data, ready for storing or sending over the network
let data = document.bsonData // Array of [UInt8]

// Initialize a document using a [UInt8]
let sameDocument = try! Document(data: data)

// Do something with the data
let temperature = Double(document[&amp;quot;temperature&amp;quot;])

// Use the temperature
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;embedded-documents&#34;&gt;Embedded documents&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let document: Document = [
            &amp;quot;subdocument&amp;quot;: [&amp;quot;hello&amp;quot;: &amp;quot;sample&amp;quot;],
            &amp;quot;anothersubdocument&amp;quot;: [81.2, &amp;quot;cheese&amp;quot;] // an array is also an embedded document
        ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;comparing&#34;&gt;Comparing&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;document[&amp;quot;double&amp;quot;] == document[&amp;quot;int&amp;quot;] // true for Double(0) == Int(0)
document[&amp;quot;double&amp;quot;] === document[&amp;quot;int&amp;quot;] // false for Double(0) === Int(0)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;supported-types&#34;&gt;Supported Types&lt;/h3&gt;

&lt;p&gt;All non-deprecated BSON 1.0 types are supported.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Double&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Document&lt;/li&gt;
&lt;li&gt;Array&lt;/li&gt;
&lt;li&gt;ObjectId&lt;/li&gt;
&lt;li&gt;Bool&lt;/li&gt;
&lt;li&gt;DateTime&lt;/li&gt;
&lt;li&gt;32-bit integer&lt;/li&gt;
&lt;li&gt;64-bit integer&lt;/li&gt;
&lt;li&gt;Null value&lt;/li&gt;
&lt;li&gt;Binary&lt;/li&gt;
&lt;li&gt;Regular Expression&lt;/li&gt;
&lt;li&gt;Min Key&lt;/li&gt;
&lt;li&gt;Max Key&lt;/li&gt;
&lt;li&gt;Timestamp&lt;/li&gt;
&lt;li&gt;Javascript Code&lt;/li&gt;
&lt;li&gt;Javascript Code with Scope&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;supported-features&#34;&gt;Supported features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;MongoDB Extended JSON&lt;/li&gt;
&lt;li&gt;ISO8601 for Extended JSON Dates&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Really&lt;/strong&gt; fast BSON Parsing and Serializing&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>